<?php
/**
 * @file
 *
 * Reports for FreeGeek
 */

// This page is slow.
set_time_limit(500);

/**
 * Implements hook_menu().
 */
function freegeek_townsquare_reports_menu() {
  $items = array();
  $items['townsquare/reports'] = array(
    'title' => 'Reports', 
    'description' => 'Generate reports', 
    'page callback' => 'freegeek_townsquare_reports_report', 
    'page arguments' => array(2), 
    'access callback' => TRUE,
  );
  return $items;
}

function freegeek_townsquare_reports_report($type) {
  $result = array();
  $skipped = 0;
  $total_sessions = 0;
  $total_hours = 0;

  switch ($type) {
    case 'month': 
      $format = 'Y-m-M';
      $title = t('By month');
      break;
    default:
      $format = 'Y';
      $title = t('By year');
  }

  $params = drupal_get_query_parameters();

  $query = new entityfieldquery;
  $query
    ->entitycondition('entity_type', 'node')
    ->propertycondition('type', 'volunteer_session')
    ->addTag('townsquare_debug');

  if (isset($params['start'])) {
    $query->fieldCondition('field_session_hours', 'value', $params['start'], '>');
  }
  if (isset($params['end'])) {
    $query->fieldCondition('field_session_hours', 'value', $params['end'], '<');
  }
  if (isset($params['limit'])) {
    $query->range(0, $params['limit']);
  }

  $i += $inc;
  $result = $query->execute();
  if ($result) {
    $sessions = entity_load('node', array_keys($result['node']));
    foreach ($sessions as $nid => $session) {
      $event_node = array_pop(field_get_items('node', $session, 'field_session_event'));
      $event = array_pop(entity_load('node', array($event_node['target_id'])));
      $uid = array_pop(field_get_items('node', $session, 'field_session_user'));
      try {
        $event_date_field = array_pop(field_get_items('node', $event, 'field_event_date'));
        $event_date = new DateObject($event_date_field['value'], $event_date_field['timezone']);
        $duration = array_pop(field_get_items('node', $session, 'field_session_duration'));
        $value = $event_date->format($format);
        $value = str_replace(array('0201', '0209'), array('2010', '2009'), $value);
        if (empty($results[$value])) {
          $results[$value] = array( 
            'bucket' => array(
              'data' => $value,
              'header' => true,
            ),
            'duration' => (float) $duration['value'],
            'sessions' => 1, 
            'nids' => array($nid),
          );
        } else {
          $total_sessions += 1;
          $total_hours += (float) $duration['value'];
          $results[$value]['duration'] += (float) $duration['value']; 
          $results[$value]['sessions'] += 1;
          if (!in_array($uid['target_id'], $results[$value]['nids'])) {
            $results[$value]['nids'][] = $uid['target_id'];
          } 
        }
      } 
      catch (Exception $e) {
        $skipped++;
      }
    }
  }
  $header = array('', ''); //'Hours', 'Sessions', 'Unique visits');
  ksort($results);
  // Post process to count unique people and "flip" results
  $tables = array('Duration' => array(), 'Sessions' => array(), 'Participants' => array(), 'Average session length' => array());
  foreach ($results as $value=>$row) {
    $tables['Duration'][] = array($row['bucket'], round($row['duration']));
    $tables['Sessions'][] = array($row['bucket'], $row['sessions']);
    $tables['Participants'][$row['bucket']['data']] = array($row['bucket'], count($row['nids']));
    $tables['Average session length'][$row['bucket']['data']] = array($row['bucket'], round($row['duration']/$row['sessions'], 1));
  }
  $markup = array(
    '#type' => 'markup',
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $output = array(
    $markup + array(
      '#markup' => t('Total sessions: !n sessions', array('!n' => $total_sessions)),
    ),
    $markup + array(
      '#type' => 'markup',
      '#markup' => t('Total hours: !n hours', array('!n' => $total_hours)),
    ),
    $markup + array(
      '#type' => 'markup',
      '#markup' => t('Average session length: !n hours', array('!n' => round($total_hours / $total_sessions, 1))),
    ),
    $markup + array(
      '#type' => 'markup',
      '#markup' => t('Debug: Skipped !n bad sessions', array('!n' => $skipped)),
    ),
  );
  foreach ($tables as $key=>$rows) {
    $header = array(t('Date'), t($key));
    $output[] =  array(
      '#prefix' => '<div class="clearfix"><h1>'. t($key) .'</h1>',
      '#suffix' => '</div>',
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
    );
  }
  drupal_add_js(libraries_get_path('jqplot') . '/jquery.jqplot.min.js');
  drupal_add_js(libraries_get_path('jqplot') . '/plugins/jqplot.categoryAxisRenderer.js');
  drupal_add_js(libraries_get_path('jqplot') . '/plugins/jqplot.barRenderer.js');
  drupal_add_js(libraries_get_path('jqplot') . '/plugins/jqplot.canvasTextRenderer.js');
  drupal_add_js(libraries_get_path('jqplot') . '/plugins/jqplot.canvasAxisTickRenderer.js');
  drupal_add_js(libraries_get_path('jqplot') . '/plugins/jqplot.highlighter.js');
  drupal_add_css(libraries_get_path('jqplot') . '/jquery.jqplot.css');
  drupal_add_js(libraries_get_path('tablechart') . '/jquery.tablechart.js');
  drupal_add_js(drupal_get_path('module', 'freegeek_townsquare_reports') . '/js/freegeek_townsquare_reports.js');
  drupal_add_css(drupal_get_path('module', 'freegeek_townsquare_reports') . '/css/freegeek_townsquare_reports.css');
  return $output;
}
